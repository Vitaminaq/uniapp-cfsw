<template>
	<view>
		<view class="swiper">
			<view
				class="swiper-item"
				v-for="item in list"
				:key="item.index"
				:style="{ transform: `translateX(${item.distance})` }"
				:animation="animations[`options${index}`].animation"
			>
				{{ item.index }}
			</view>
		</view>
		<view @tap="next">下一节</view>
	</view>
</template>

<script lang="ts">
import { Vue, Component } from 'vue-property-decorator';

// :style="{ transform: `translateX(${item.distance})` }"
@Component<Swiper>({})
export default class Swiper extends Vue {
	public currentIndex: number = 0;
	public animations: any = {};
	// public list: any[] = [];

	public get list() {
		return Array.from({ length: 100 }, (v, i) => {
			return {
				distance: `${i}00%`,
				index: i,
				animation: uni.createAnimation({
					duration: 1000,
					timingFunction: 'ease'
				}),
				animationData: {}
			};
		});
	}
	// public set list(val: any) {
	// 	this.list = val;
	// }
	public created() {
		this.list.forEach((item: any) => {
			this.$set(
				this.animations,
				`animation${item.index}`,
				uni.createAnimation({
					duration: 1000,
					timingFunction: 'ease'
				})
			);
			this.$set(this.animations, `animationData${item.index}`, {});
		});
		console.log(this.animations, 'lllllllllllllllllllll');
		// 生成动画对象
		// this.list = Array.from({ length: 100 }, (v, i) => {
		// 	return {
		// 		distance: `${i}00%`,
		// 		index: i,
		// 		animation: uni.createAnimation({
		// 			duration: 1000,
		// 			timingFunction: 'ease'
		// 		}),
		// 		animationData: null
		// 	};
		// });
	}

	public next() {
		this.currentIndex++;
		this.animate();
	}
	public animate() {
		this.list.forEach((v, i) => {
			this.animations[`options${i}`].animation
				.translateX(`${i - this.currentIndex}00%`)
				.step();
			this.animations[`options${i}`].animationData = this.animations[
				`options${i}`
			].animation.export();
		});
		console.log(this.animations, 'jjjjjjjjjjjjjjjjjjjjjjjjj');
		// this.list = this.list.map(
		// 	({ animation, animationData, index, distance, animate }: any) => {
		// 		animation.translateX(`${index - this.currentIndex}00%`).step();
		// 		return {
		// 			distance,
		// 			index,
		// 			animate,
		// 			animationData: animation.export()
		// 		};
		// 	}
		// );
	}
	/**
	 * 计算手指滑动速度
	 */
	public calculateSpeed() {}
}
</script>

<style>
.swiper {
	position: relative;
	width: 100%;
	height: 400px;
}
.swiper-item {
	position: absolute;
	height: 100%;
	width: 100%;
	background: red;
	border: solid 1px #adadda;
}
</style>
